#
#
#
#   Compiled on: Thu Feb 13 02:38:55 PM MST 2025
#
#
#
#
#
#               DO NOT EDIT THIS FILE DIRECTLY
#
#               THIS FILE IS GENERATED VIA compile.sh
# 
#               Edit source files and run compile.sh
#
#
#
#
#               DO NOT EDIT
#
#
#
#
############################################################
############################################################

# 02_plugins.zsh
# 
# Plugins configuration
#
# uses znap for plugins
# Load fzf for:
#   - Kill process list completion
#   - History searching (Ctrl+r)
#   - File searching (Ctrl+t)
if [ -f /usr/share/fzf/completion.zsh ]; then
    source /usr/share/fzf/completion.zsh
else
    echo ".zshrc :: 02_plugins.zsh :: Unable to find fzf...\n"
fi


# znap plugin manager
# https://github.com/marlonrichert/zsh-snap
# Download Znap, if it's not there yet.
ZNAPDIR=$ZDOTDIR/znap

# set the location for znap to put the plugins
zstyle ':znap:*' repos-dir $ZDOTDIR/znap_plugins

# install znap if it isn't already
if [ ! -f $ZNAPDIR/znap.zsh ]; then
    git clone --depth 1 -- \
        https://github.com/marlonrichert/zsh-snap.git $ZNAPDIR
fi

# start znap
source $ZNAPDIR/znap.zsh

# initialize znap
source $ZNAPDIR/znap.zsh

znap prompt sindresorhus/pure

# Extra zsh completions
#    - Extra configuration in: 10_completions.zsh
znap source zsh-users/zsh-completions

# Autosuggestions automatically shows suggested commands from history
#    - Ctrl + Space is the completion command (defined in keybindings)
znap source zsh-users/zsh-autosuggestions

# Set the color of the autosuggest results
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=10'

# Syntax highlighting
znap source zsh-users/zsh-syntax-highlighting

# zsh-autocomplete for real time type ahead autocompletion
# https://github.com/marlonrichert/zsh-autocomplete
znap source marlonrichert/zsh-autocomplete



#
# 03_keybindings.zsh
# 
# Define the keybindings.
#   - Plugin keybindings
#   - Define the Home, End, Delete keys from terminfo
#

# To determine key bindings for delete/home/end
#autoload zkbd; zkbd

# vim mode settings
#
bindkey -e
bindkey '^P' up-history
bindkey '^N' down-history

# backspace and ^h working even after
# returning from command mode
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char

# ctrl-w removed word backwards
bindkey '^w' backward-kill-word

# zsh/autosuggestions: accept the suggestion
bindkey '^ ' autosuggest-accept

# fzf key bindings
source /usr/share/fzf/key-bindings.zsh

# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
zmodload zsh/terminfo
typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[ShiftTab]="${terminfo[kcbt]}"

# setup key accordingly
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"      beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"       end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"    overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}" backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"    delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"        up-line-or-history
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"      down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"      backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"     forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"    beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"  end-of-buffer-or-history
[[ -n "${key[ShiftTab]}"  ]] && bindkey -- "${key[ShiftTab]}"  reverse-menu-complete

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	autoload -Uz add-zle-hook-widget
	function zle_application_mode_start {
		echoti smkx
	}
	function zle_application_mode_stop {
		echoti rmkx
	}
	add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

#
# 04_aliases.zsh
#
# Aliases
#


# Alias bookmarks
alias bkp='cd ~/projects'
alias bkd='cd ~/Downloads'

# Alias xclip so you can do cmd | xclip (ie cat file.txt | xclip)
alias xclip="xclip -selection c"


# Make ls more friendly
# 
# REPLACED BY exa command (alias in this file)
#
# alias ls="${aliases[ls]:-ls} -h --group-directories-first"
# if [ -x "$(command -v dircolors)" ]; then
#     if [[ -s "$HOME/.dir_colors" ]]; then
#         eval "$(dircolors --sh "$HOME/.dir_colors")"
#     else
#         eval "$(dircolors --sh)"
#     fi
#     alias ls="${aliases[ls]:-ls} --color=auto"
# else
#     alias ls="${aliases[ls]:-ls} -F"
# fi

#
# Most of the rest of the aliases are from prezto
#

# Disable correction.
alias ack='nocorrect ack'
alias cd='nocorrect cd'
alias cp='nocorrect cp'
alias grep='nocorrect grep'
alias man='nocorrect man'
alias mkdir='nocorrect mkdir'
alias mv='nocorrect mv'
alias rm='nocorrect rm'

# Disable globbing.
alias bower='noglob bower'
alias fc='noglob fc'
alias find='noglob find'
alias ftp='noglob ftp'
alias history='noglob history'
alias locate='noglob locate'
alias rake='noglob rake'
alias rsync='noglob rsync'
alias scp='noglob scp'
alias sftp='noglob sftp'

# Define general aliases.
alias _='sudo'

alias mkdir="${aliases[mkdir]:-mkdir} -p"

# exa
# Replace ls with exa
if ! [ -x "$(command -v exa)" ]; then
  echo 'Warning: exa is not installed. exa is the ls replacement.' >&2
else
  # Define the exa command (ls replacement)
  #  --group shows the user group
  EXA_COMMAND="exa --long --group --group-directories-first"
  alias exa="$EXA_COMMAND"
  alias ls="$EXA_COMMAND"
fi

# bat
# bat is a cat replacement
if ! [ -x "$(command -v bat)" ]; then
  echo 'Warning: bat is not installed. bat is the cat replacement.' >&2
else
  alias bat="bat --theme='OneHalfLight'"
fi

# btm
# btm (bottom) is a htop or top replacement
alias btm="btm --color default-light"

# Resource Usage
alias df='df -kh'
alias du='du -kh'


# zshmarks aliases
alias bmgo="jump"
alias bmark="bookmark"
alias bmarks="showmarks"


#
# 05_zstyles.zsh
#
# zstyle configuration
#

# Set the completion to match insensitive (ie cd documents will match Documents)
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'

zstyle ':completion:*' menu select # select completions with arrow keys
zstyle ':completion:*' group-name '' # group results by category
zstyle ':completion:::::' completer _expand _complete _ignored _approximate # enable approximate matches for completi

#
# 06_zoxide.zsh
#
# Initialize zoxide
# 
# zoxide is a cd replacement that learns your most used directories
#
eval "$(zoxide init zsh)"


#
# 07_zoxide.zsh
#
# Define some custom functions.
# These are directly accessible on the cli.
# 
# 
#

# Makes a directory and changes to it.
function mkdcd {
    [[ -n "$1" ]] && mkdir -p "$1" && builtin cd "$1"
}

# Changes to a directory and lists its contents.
function cdls {
    builtin cd "${argv[-1]}" && ls "${(@)argv[1,-2]}"
}

# Show some basic commands as reminders
function sos {
    echo "bat - cat replacement"
    echo "fd - find replacment"
    echo "dust - disk usage with bar graphs"
    echo "tldr - show basic command info"
    echo "rg - grep replacement"
    echo "z - change directories with history"
}


# get the memory useage for a process
# https://stackoverflow.com/questions/3853655/in-linux-how-to-tell-how-much-memory-processes-are-using
mem()
{                                                                                                      
    ps -eo rss,pid,euser,args:100 --sort %mem | grep -v grep | grep -i "$@" | awk '{printf $1/1024 "MB"; $1=""; print }'
}

# compile zsh and load a new instance
compilezsh()
{
    echo "Running ~/dotfiles/zsh/.zsh/compile.sh...";
    /usr/bin/bash ~/dotfiles/zsh/.zsh/compile.sh;

    echo "Sourcing the new zsh file...";
    source ~/.zsh/.zshrc;
}

# Copy file or directory to system clipboard
# Note: xclip is aliased in 04_aliases.zsh
copy(){
    if ! [ -x "/usr/bin/xclip" ]; then
        echo "error: xclip not installed"
        return 1
    fi

    if [[ $# -eq 0 ]]; then
        # No parameter, so copy the current directory
        pwd | xclip && echo "Current directory name copied to clipboard."

    else

        # Output a message if the file doesn't exist
        [[ -f "$1" ]] || echo "$1 not found."

        # If the file exists, copy the contents
        [[ -f "$1" ]] && xclip "$1" && echo "File $1 contents copied to clipboard."
    fi
}

encrypt(){
    filename="$1"

    if [ -d "$filename" ]; then
        echo "$filename is a directory. Cannot encrypt. Tar it or something."
    fi

    # get the last extension (ie .gz from .tar.gz)
    extension="${filename##*.}"
    newfilename="$filename"
    if ! [ "$extension" = "gpg" ]; then
        newfilename="$filename.gpg"
    fi

    echo "Encrypting $filename to $newfilename"
    
    cmd="gpg --cipher-algo=AES256 --output=$newfilename -c $filename"

    echo "${cmd}"
    if eval "$cmd"; then
      echo "Would you like to remove $filename? (y/n)"
      read -r delete

      if [ "$delete" = "y" ] || [ "$delete" = "Y" ]; then
          echo "Shredding $filename..."
          shred -u "$filename"
      fi
    fi
}

decrypt(){
    filename="$1"

    newfilename="${filename}"
    extension="${filename##*.}"
    if [ "$extension" = "gpg" ]; then
      # strip gpg from filename
      newfilename="${filename%.*}"
    fi
    cmd="gpg --cipher-algo=AES256 --output=$newfilename --decrypt $filename"
    echo "${cmd}"
    if eval "$cmd"; then
      echo "Would you like to remove $filename? (y/n)"
      read -r delete

      if [ "$delete" = "y" ] || [ "$delete" = "Y" ]; then
          echo "Shredding $filename..."
          shred -u "$filename"
      fi
    fi
}

# Run fzf on ripgrep `rg` commands
#  - Lists files at bottom
#  - Shows file preview at top
function frg {
        result=$(rg --ignore-case --color=always --line-number --no-heading "$@" |
        fzf --ansi \
            --color 'hl:-1:underline,hl+:-1:underline:reverse' \
            --delimiter ':' \
            --preview "bat --color=always {1} --theme='Solarized (light)' --highlight-line {2}" \
            --preview-window 'up,60%,border-bottom,+{2}+3/3,~3')
      file=${result%%:*}
      linenumber=$(echo "${result}" | cut -d: -f2)
      if [[ -n "$file" ]]; then
              $EDITOR +"${linenumber}" "$file"
      fi
}

#
# 10_completions.zsh
#
# Configure the zsh completions
#
#
# Sets completion options.
#
# Authors:
#   Robby Russell <robby@planetargon.com>
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Return if requirements are not found.
if [[ "$TERM" == 'dumb' ]]; then
  return 1
fi

#
# Options
#

setopt COMPLETE_IN_WORD    # Complete from both ends of a word.
setopt ALWAYS_TO_END       # Move cursor to the end of a completed word.
setopt PATH_DIRS           # Perform path search even on command names with slashes.
setopt AUTO_MENU           # Show completion menu on a successive tab press.
setopt AUTO_LIST           # Automatically list choices on ambiguous completion.
setopt AUTO_PARAM_SLASH    # If completed parameter is a directory, add a trailing slash.
setopt EXTENDED_GLOB       # Needed for file modification glob modifiers with compinit
unsetopt MENU_COMPLETE     # Do not autoselect the first completion entry.
unsetopt FLOW_CONTROL      # Disable start/stop characters in shell editor.

# Load and initialize the completion system ignoring insecure directories with a
# cache time of 20 hours, so it should almost always regenerate the first time a
# shell is opened each day.
autoload -Uz compinit
_comp_files=(${ZDOTDIR:-$HOME}/.zcache/.zcompdump(Nm-20))
if (( $#_comp_files )); then
  compinit -i -C
else
  compinit -i
fi
unset _comp_files

#
# Styles
#

# Use caching to make completion for commands such as dpkg and apt usable.
zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' cache-path "${ZDOTDIR:-$HOME}/.zcache/.zcompcache"

# Case insensitive matching
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
unsetopt CASE_GLOB

# Group matches and describe.
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:corrections' format ' %F{green}-- %d (errors: %e) --%f'
zstyle ':completion:*:descriptions' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' verbose yes

# Fuzzy match mistyped completions.
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

# Increase the number of errors based on the length of the typed word. But make
# sure to cap (at 7) the max-errors to avoid hanging.
zstyle -e ':completion:*:approximate:*' max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3>7?7:($#PREFIX+$#SUFFIX)/3))numeric)'

# Don't complete unavailable commands.
zstyle ':completion:*:functions' ignored-patterns '(_*|pre(cmd|exec))'

# Array completion element sorting.
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# Directories
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:*:cd:*' tag-order local-directories directory-stack path-directories
zstyle ':completion:*:*:cd:*:directory-stack' menu yes select
zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
zstyle ':completion:*' squeeze-slashes true

# History
zstyle ':completion:*:history-words' stop yes
zstyle ':completion:*:history-words' remove-all-dups yes
zstyle ':completion:*:history-words' list false
zstyle ':completion:*:history-words' menu yes

# Environment Variables
zstyle ':completion::*:(-command-|export):*' fake-parameters ${${${_comps[(I)-value-*]#*,}%%,*}:#-*-}

# Populate completions for ssh from known hosts and config
zstyle -e ':completion:*:hosts' hosts 'reply=(
  ${=${=${=${${(f)"$(cat {/etc/ssh/ssh_,~/.ssh/}known_hosts(|2)(N) 2> /dev/null)"}%%[#| ]*}//\]:[0-9]*/ }//,/ }//\[/ }
  ${=${${${${(@M)${(f)"$(cat ~/.ssh/config 2> /dev/null)"}:#Host *}#Host }:#*\**}:#*\?*}}
)'

# Don't complete uninteresting users...
zstyle ':completion:*:*:*:users' ignored-patterns \
  adm amanda apache avahi beaglidx bin cacti canna clamav daemon \
  dbus distcache dovecot fax ftp games gdm gkrellmd gopher \
  hacluster haldaemon halt hsqldb ident junkbust ldap lp mail \
  mailman mailnull mldonkey mysql nagios \
  named netdump news nfsnobody nobody nscd ntp nut nx openvpn \
  operator pcap postfix postgres privoxy pulse pvm quagga radvd \
  rpc rpcuser rpm shutdown squid sshd sync uucp vcsa xfs '_*'

# ... unless we really want to.
zstyle '*' single-ignored show

# Ignore multiple entries.
zstyle ':completion:*:(rm|kill|diff):*' ignore-line other
zstyle ':completion:*:rm:*' file-patterns '*:all-files'

# Kill
zstyle ':completion:*:*:*:*:processes' command 'ps -u $LOGNAME -o pid,user,command -w'
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;36=0=01'
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:*:kill:*' force-list always
zstyle ':completion:*:*:kill:*' insert-ids single

# Man
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.(^1*)' insert-sections true

# Media Players
zstyle ':completion:*:*:mpg123:*' file-patterns '*.(mp3|MP3):mp3\ files *(-/):directories'
zstyle ':completion:*:*:mpg321:*' file-patterns '*.(mp3|MP3):mp3\ files *(-/):directories'
zstyle ':completion:*:*:ogg123:*' file-patterns '*.(ogg|OGG|flac):ogg\ files *(-/):directories'
zstyle ':completion:*:*:mocp:*' file-patterns '*.(wav|WAV|mp3|MP3|ogg|OGG|flac):ogg\ files *(-/):directories'

# Mutt
if [[ -s "$HOME/.mutt/aliases" ]]; then
  zstyle ':completion:*:*:mutt:*' menu yes select
  zstyle ':completion:*:mutt:*' users ${${${(f)"$(<"$HOME/.mutt/aliases")"}#alias[[:space:]]}%%[[:space:]]*}
fi

# SSH/SCP/RSYNC
zstyle ':completion:*:(ssh|scp|rsync):*' tag-order 'hosts:-host:host hosts:-domain:domain hosts:-ipaddr:ip\ address *'
zstyle ':completion:*:(scp|rsync):*' group-order users files all-files hosts-domain hosts-host hosts-ipaddr
zstyle ':completion:*:ssh:*' group-order users hosts-domain hosts-host users hosts-ipaddr
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-host' ignored-patterns '*(.|:)*' loopback ip6-loopback localhost ip6-localhost broadcasthost
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-domain' ignored-patterns '<->.<->.<->.<->' '^[-[:alnum:]]##(.[-[:alnum:]]##)##' '*@*'
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-ipaddr' ignored-patterns '^(<->.<->.<->.<->|(|::)([[:xdigit:].]##:(#c,2))##(|%*))' '127.0.0.<->' '255.255.255.255' '::1' 'fe80::*'

#
# 11_history.zsh
#
# Configure the history
# History variables are configured in 01_variables.zsh
#

#
# Options
#

setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ':start:elapsed;command' format.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire a duplicate event first when trimming history.
setopt HIST_IGNORE_DUPS          # Do not record an event that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete an old recorded event if a new event is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a previously found event.
setopt HIST_IGNORE_SPACE         # Do not record an event starting with a space.
setopt HIST_SAVE_NO_DUPS         # Do not write a duplicate event to the history file.
setopt HIST_VERIFY               # Do not execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing non-existent history.

#
# Variables
#

HISTFILE="${ZDOTDIR:-$HOME}/.zcache/.zhistory"  # The path to the history file.
HISTSIZE=10000                   # The maximum number of events to save in the internal history.
SAVEHIST=10000 # The maximum number of events to save in the history file.

#
# 12_directory.zsh
#
# Sets directory options and defines directory aliases.
#
# Authors:
#   James Cox <james@imaj.es>
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

#
# Options
#

setopt AUTO_CD              # Auto changes to a directory without typing cd.
setopt AUTO_PUSHD           # Push the old directory onto the stack on cd.
setopt PUSHD_IGNORE_DUPS    # Do not store duplicates in the stack.
setopt PUSHD_SILENT         # Do not print the directory stack after pushd or popd.
setopt PUSHD_TO_HOME        # Push to home directory when no argument is given.
setopt CDABLE_VARS          # Change directory to a path stored in a variable.
setopt MULTIOS              # Write to multiple descriptors.
setopt EXTENDED_GLOB        # Use extended globbing syntax.
unsetopt CLOBBER            # Do not overwrite existing files with > and >>.
# Use >! and >>! to bypass.

#
# Aliases
#

alias d='dirs -v'
for index ({1..9}) alias "$index"="cd +${index}"; unset index
